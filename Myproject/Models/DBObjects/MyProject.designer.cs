#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Myproject.Models.DBObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="projectdatabase")]
	public partial class MyProjectDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBlood(Blood instance);
    partial void UpdateBlood(Blood instance);
    partial void DeleteBlood(Blood instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertMedicine(Medicine instance);
    partial void UpdateMedicine(Medicine instance);
    partial void DeleteMedicine(Medicine instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    #endregion
		
		public MyProjectDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["projectdatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyProjectDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyProjectDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyProjectDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyProjectDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Blood> Bloods
		{
			get
			{
				return this.GetTable<Blood>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Medicine> Medicines
		{
			get
			{
				return this.GetTable<Medicine>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bloods")]
	public partial class Blood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdBlood;
		
		private string _Type;
		
		private string _RhType;
		
		private string _BloodLocation;
		
		private int _Stock;
		
		private System.DateTime _EntryDate;
		
		private string _LinkToTests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdBloodChanging(System.Guid value);
    partial void OnIdBloodChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnRhTypeChanging(string value);
    partial void OnRhTypeChanged();
    partial void OnBloodLocationChanging(string value);
    partial void OnBloodLocationChanged();
    partial void OnStockChanging(int value);
    partial void OnStockChanged();
    partial void OnEntryDateChanging(System.DateTime value);
    partial void OnEntryDateChanged();
    partial void OnLinkToTestsChanging(string value);
    partial void OnLinkToTestsChanged();
    #endregion
		
		public Blood()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBlood", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdBlood
		{
			get
			{
				return this._IdBlood;
			}
			set
			{
				if ((this._IdBlood != value))
				{
					this.OnIdBloodChanging(value);
					this.SendPropertyChanging();
					this._IdBlood = value;
					this.SendPropertyChanged("IdBlood");
					this.OnIdBloodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RhType", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string RhType
		{
			get
			{
				return this._RhType;
			}
			set
			{
				if ((this._RhType != value))
				{
					this.OnRhTypeChanging(value);
					this.SendPropertyChanging();
					this._RhType = value;
					this.SendPropertyChanged("RhType");
					this.OnRhTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodLocation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BloodLocation
		{
			get
			{
				return this._BloodLocation;
			}
			set
			{
				if ((this._BloodLocation != value))
				{
					this.OnBloodLocationChanging(value);
					this.SendPropertyChanging();
					this._BloodLocation = value;
					this.SendPropertyChanged("BloodLocation");
					this.OnBloodLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock", DbType="Int NOT NULL")]
		public int Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				if ((this._Stock != value))
				{
					this.OnStockChanging(value);
					this.SendPropertyChanging();
					this._Stock = value;
					this.SendPropertyChanged("Stock");
					this.OnStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryDate", DbType="DateTime NOT NULL")]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkToTests", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string LinkToTests
		{
			get
			{
				return this._LinkToTests;
			}
			set
			{
				if ((this._LinkToTests != value))
				{
					this.OnLinkToTestsChanging(value);
					this.SendPropertyChanging();
					this._LinkToTests = value;
					this.SendPropertyChanged("LinkToTests");
					this.OnLinkToTestsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctors")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdDoctor;
		
		private string _Name;
		
		private string _DoctorCity;
		
		private int _EmergencyPhone;
		
		private EntitySet<Medicine> _Medicines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdDoctorChanging(System.Guid value);
    partial void OnIdDoctorChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDoctorCityChanging(string value);
    partial void OnDoctorCityChanged();
    partial void OnEmergencyPhoneChanging(int value);
    partial void OnEmergencyPhoneChanged();
    #endregion
		
		public Doctor()
		{
			this._Medicines = new EntitySet<Medicine>(new Action<Medicine>(this.attach_Medicines), new Action<Medicine>(this.detach_Medicines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDoctor", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdDoctor
		{
			get
			{
				return this._IdDoctor;
			}
			set
			{
				if ((this._IdDoctor != value))
				{
					this.OnIdDoctorChanging(value);
					this.SendPropertyChanging();
					this._IdDoctor = value;
					this.SendPropertyChanged("IdDoctor");
					this.OnIdDoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorCity", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DoctorCity
		{
			get
			{
				return this._DoctorCity;
			}
			set
			{
				if ((this._DoctorCity != value))
				{
					this.OnDoctorCityChanging(value);
					this.SendPropertyChanging();
					this._DoctorCity = value;
					this.SendPropertyChanged("DoctorCity");
					this.OnDoctorCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyPhone", DbType="Int NOT NULL")]
		public int EmergencyPhone
		{
			get
			{
				return this._EmergencyPhone;
			}
			set
			{
				if ((this._EmergencyPhone != value))
				{
					this.OnEmergencyPhoneChanging(value);
					this.SendPropertyChanging();
					this._EmergencyPhone = value;
					this.SendPropertyChanged("EmergencyPhone");
					this.OnEmergencyPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Medicine", Storage="_Medicines", ThisKey="IdDoctor", OtherKey="IDdoctor")]
		public EntitySet<Medicine> Medicines
		{
			get
			{
				return this._Medicines;
			}
			set
			{
				this._Medicines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medicines(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Medicines(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicines")]
	public partial class Medicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IdMedicine;
		
		private string _MedicineName;
		
		private int _Packages;
		
		private string _Invoice;
		
		private string _Provider;
		
		private System.Guid _IDdoctor;
		
		private EntityRef<Doctor> _Doctor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdMedicineChanging(System.Guid value);
    partial void OnIdMedicineChanged();
    partial void OnMedicineNameChanging(string value);
    partial void OnMedicineNameChanged();
    partial void OnPackagesChanging(int value);
    partial void OnPackagesChanged();
    partial void OnInvoiceChanging(string value);
    partial void OnInvoiceChanged();
    partial void OnProviderChanging(string value);
    partial void OnProviderChanged();
    partial void OnIDdoctorChanging(System.Guid value);
    partial void OnIDdoctorChanged();
    #endregion
		
		public Medicine()
		{
			this._Doctor = default(EntityRef<Doctor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdMedicine", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IdMedicine
		{
			get
			{
				return this._IdMedicine;
			}
			set
			{
				if ((this._IdMedicine != value))
				{
					this.OnIdMedicineChanging(value);
					this.SendPropertyChanging();
					this._IdMedicine = value;
					this.SendPropertyChanged("IdMedicine");
					this.OnIdMedicineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string MedicineName
		{
			get
			{
				return this._MedicineName;
			}
			set
			{
				if ((this._MedicineName != value))
				{
					this.OnMedicineNameChanging(value);
					this.SendPropertyChanging();
					this._MedicineName = value;
					this.SendPropertyChanged("MedicineName");
					this.OnMedicineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Packages", DbType="Int NOT NULL")]
		public int Packages
		{
			get
			{
				return this._Packages;
			}
			set
			{
				if ((this._Packages != value))
				{
					this.OnPackagesChanging(value);
					this.SendPropertyChanging();
					this._Packages = value;
					this.SendPropertyChanged("Packages");
					this.OnPackagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invoice", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Invoice
		{
			get
			{
				return this._Invoice;
			}
			set
			{
				if ((this._Invoice != value))
				{
					this.OnInvoiceChanging(value);
					this.SendPropertyChanging();
					this._Invoice = value;
					this.SendPropertyChanged("Invoice");
					this.OnInvoiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDdoctor", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDdoctor
		{
			get
			{
				return this._IDdoctor;
			}
			set
			{
				if ((this._IDdoctor != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDdoctorChanging(value);
					this.SendPropertyChanging();
					this._IDdoctor = value;
					this.SendPropertyChanged("IDdoctor");
					this.OnIDdoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Medicine", Storage="_Doctor", ThisKey="IDdoctor", OtherKey="IdDoctor", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Medicines.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Medicines.Add(this);
						this._IDdoctor = value.IdDoctor;
					}
					else
					{
						this._IDdoctor = default(System.Guid);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patients")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDPatient;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _UserAddress;
		
		private int _PhoneNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPatientChanging(System.Guid value);
    partial void OnIDPatientChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnUserAddressChanging(string value);
    partial void OnUserAddressChanged();
    partial void OnPhoneNumberChanging(int value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public Patient()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPatient", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDPatient
		{
			get
			{
				return this._IDPatient;
			}
			set
			{
				if ((this._IDPatient != value))
				{
					this.OnIDPatientChanging(value);
					this.SendPropertyChanging();
					this._IDPatient = value;
					this.SendPropertyChanged("IDPatient");
					this.OnIDPatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAddress", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string UserAddress
		{
			get
			{
				return this._UserAddress;
			}
			set
			{
				if ((this._UserAddress != value))
				{
					this.OnUserAddressChanging(value);
					this.SendPropertyChanging();
					this._UserAddress = value;
					this.SendPropertyChanged("UserAddress");
					this.OnUserAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Int NOT NULL")]
		public int PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
